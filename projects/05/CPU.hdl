// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction ,b=aluOut ,sel=instruction[15] ,out=decodeMuxOut);
    
    // A register load logic
    And(a=instruction[15],b=instruction[5],out=cInstStorA);
    Not(in=instruction[15],out=notInst15);
    Or(a=notInst15,b=cInstStorA,out=loadA);
    ARegister(in=decodeMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM);
    
    // Program Counter
    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    
    // Program Counter load logic
    And(a=instruction[15], b=instruction[2], out=cAndj3);
    And(a=instruction[15], b=instruction[1], out=cAndj2);
    And(a=instruction[15], b=instruction[0], out=cAndj1);
    // JGT
    Or(a=zrOut, b=ngOut, out=zrOrng);
    Not(in=zrOrng,out=notZRorNG);
    And(a=cAndj1, b=notZRorNG, out=JGT);
    // JEQ
    And(a=cAndj2, b=zrOut, out=JEQ);
    // JGE
    And(a=cAndj1, b=cAndj2, out=j1Andj2);
    Not(in=ngOut, out=notNGout);
    And(a=j1Andj2, b=notNGout, out=JGE);
    // JLT
    And(a=cAndj3, b=ngOut, out=JLT);
    // JNE
    And(a=cAndj1, b=cAndj3, out=j1Andj3);
    Not(in=zrOut, out=notZR);
    And(a=j1Andj3, b=notZR, out=JNE);
    // JLE
    And(a=cAndj2, b=cAndj3, out=j2Andj3);
    Or(a=ngOut, b=zrOrng, out=ngOrzr);
    And(a=j2Andj3, b=ngOrzr, out=JLE);
    // JMP
    And(a=j1Andj2, b=cAndj3, out=JMP);
    // OR all jump conditions
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=loadPC);
    
    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegOut);
    
    // A reg or Memory -> ALU
    And(a=instruction[15], b=instruction[12], out=memOrA);
    Mux16(a=aRegOut, b=inM, sel=memOrA, out=aOrmemToALU);
    
    // ALU
    // ALU Control Bit Logic
    And(a=instruction[15], b=instruction[11], out=cAndzx);
    And(a=instruction[15], b=instruction[10], out=cAndnx);
    And(a=instruction[15], b=instruction[9], out=cAndzy);
    And(a=instruction[15], b=instruction[8], out=cAndny);
    And(a=instruction[15], b=instruction[7], out=cAndf);
    And(a=instruction[15], b=instruction[6], out=cAndno);
    
    ALU(x=dRegOut, y=aOrmemToALU, zx=cAndzx, nx=cAndnx, zy=cAndzy, ny=cAndny, f=cAndf, no=cAndno, out=aluOut, out=outM, zr=zrOut, ng=ngOut);

    // Write Memory
    And(a=instruction[15], b=instruction[3], out=writeM);
}